import ctypes
eof = False

pbszUserKey = [0x088, 0x0e3, 0x04f, 0x08f, 0x008, 0x017, 0x079, 0x0f1, 0x0e9, 0x0f3, 0x094, 0x037, 0x00a, 0x0d4, 0x005, 0x089]
pbszIV = [0x026, 0x08d, 0x066, 0x0a7, 0x035, 0x0a8, 0x01a, 0x081, 0x06f, 0x0ba, 0x0d9, 0x0fa, 0x036, 0x016, 0x025, 0x001]
plainText = ["0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F",
             "0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F",
             "0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F",
             "0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F",
             "0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06"]
pbszCipherText = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
                  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
                  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
                  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
                  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
                  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
                  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
                  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
                  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09]


pbszUserKey_array = (ctypes.c_ubyte * len(pbszUserKey))(*pbszUserKey)
pbszIV_array = (ctypes.c_ubyte * len(pbszIV))(*pbszIV)
plainText_array = (ctypes.c_wchar * len(plainText))(*plainText)
pbszCipherText_array = (ctypes.c_ubyte * len(pbszCipherText))(*pbszCipherText)

kisa_seed_cbc = ctypes.cdll.LoadLibrary("./kisa_seed_cbc.so")
seed_cbc_encrypt = kisa_seed_cbc.SEED_CBC_Encrypt
seed_cbc_decrypt = kisa_seed_cbc.SEED_CBC_Decrypt

######################################################################################################

res = seed_cbc_encrypt(pbszUserKey_array, pbszIV_array, plainText_array, 10, pbszCipherText_array) # key, IV, 평문, 평문 길이, 암호문출력버퍼

print("encrypt res :", res)
enc_array=[]
range(0, res)
for i in range(res):
        print(hex(pbszCipherText_array[i]), end=' ')
        enc_array.append(pbszCipherText_array[i])
print("\r\n")
print(enc_array, type(enc_array, pbszCipherText_array, type(pbszCipherText_array)))

######################################################################################################

res = seed_cbc_decrypt(pbszUserKey_array, pbszIV_array, pbszCipherText_array, res, plainText_array) # key, IV, 암호문, 암호문 길이, 평문출력버퍼

print("decrypt res :", res)

range(0, res)
for i in range(res):
        print(hex(plainText_array[i]), end=' ')

print("\r\n")
